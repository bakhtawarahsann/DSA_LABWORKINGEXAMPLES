import java.util.Arrays;
import java.util.Scanner;

public class ArrayOperations {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // 1. Initialization, Declaration, Add, Edit, Delete for 1D array
        System.out.print("Enter the size of the array: ");
        int size = sc.nextInt();
        int[] arr = new int[size];
        
        // Initializing the array
        System.out.println("Initializing array:");
        for (int i = 0; i < size; i++) {
            System.out.print("Enter element " + (i + 1) + ": ");
            arr[i] = sc.nextInt();
        }
        
        // Add element (insert at the end)
        System.out.print("Enter a number to add at the end: ");
        int addNum = sc.nextInt();
        arr = addElement(arr, addNum);
        System.out.println("Array after adding: " + Arrays.toString(arr));
        
        // Edit element
        System.out.print("Enter index to edit: ");
        int editIndex = sc.nextInt();
        System.out.print("Enter new value: ");
        int newValue = sc.nextInt();
        arr = editElement(arr, editIndex, newValue);
        System.out.println("Array after editing: " + Arrays.toString(arr));
        
        // Delete element
        System.out.print("Enter index to delete: ");
        int deleteIndex = sc.nextInt();
        arr = deleteElement(arr, deleteIndex);
        System.out.println("Array after deleting: " + Arrays.toString(arr));
        
        // 2. Reverse an array
        reverseArray(arr);
        System.out.println("Reversed array: " + Arrays.toString(arr));
        
        // 3. Find minimum value of the array
        System.out.println("Minimum value in the array: " + findMinValue(arr));
        
        // 4. Find second max value in an array
        System.out.println("Second max value: " + findSecondMaxValue(arr));
        
        // 5. Move zeroes to the end
        moveZeroesToEnd(arr);
        System.out.println("Array after moving zeroes to the end: " + Arrays.toString(arr));
        
        // 6. Resize an array (increase size)
        arr = resizeArray(arr, size + 2);
        System.out.println("Array after resizing: " + Arrays.toString(arr));
        
        // 7. Find missing number in an array (assuming 1 to N)
        System.out.print("Enter array size N-1: ");
        int missingSize = sc.nextInt();
        int[] missingArray = new int[missingSize];
        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < missingSize; i++) {
            missingArray[i] = sc.nextInt();
        }
        System.out.println("Missing number: " + findMissingNumber(missingArray, missingSize + 1));
        
        // 8. Check if a string is a palindrome
        System.out.print("Enter a string to check for palindrome: ");
        String str = sc.next();
        System.out.println("Is palindrome? " + isPalindrome(str));
        
        // 9. Search, Insert and Delete in a sorted array
        int[] sortedArr = {1, 3, 5, 7, 9};
        System.out.println("Initial sorted array: " + Arrays.toString(sortedArr));
        
        // Search in sorted array
        System.out.print("Enter value to search: ");
        int searchValue = sc.nextInt();
        System.out.println("Found " + searchValue + "? " + binarySearch(sortedArr, searchValue));
        
        // Insert in sorted array
        System.out.print("Enter value to insert in sorted array: ");
        int insertValue = sc.nextInt();
        sortedArr = insertInSortedArray(sortedArr, insertValue);
        System.out.println("Array after insertion: " + Arrays.toString(sortedArr));
        
        // Delete in sorted array
        System.out.print("Enter value to delete from sorted array: ");
        int deleteValue = sc.nextInt();
        sortedArr = deleteFromSortedArray(sortedArr, deleteValue);
        System.out.println("Array after deletion: " + Arrays.toString(sortedArr));
    }
    
    // Add element to array
    public static int[] addElement(int[] arr, int num) {
        arr = Arrays.copyOf(arr, arr.length + 1);
        arr[arr.length - 1] = num;
        return arr;
    }

    // Edit element at a specific index
    public static int[] editElement(int[] arr, int index, int newValue) {
        if (index >= 0 && index < arr.length) {
            arr[index] = newValue;
        } else {
            System.out.println("Invalid index.");
        }
        return arr;
    }

    // Delete element at a specific index
    public static int[] deleteElement(int[] arr, int index) {
        if (index >= 0 && index < arr.length) {
            for (int i = index; i < arr.length - 1; i++) {
                arr[i] = arr[i + 1];
            }
            arr = Arrays.copyOf(arr, arr.length - 1);
        } else {
            System.out.println("Invalid index.");
        }
        return arr;
    }

    // Reverse the array
    public static void reverseArray(int[] arr) {
        int start = 0, end = arr.length - 1;
        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }

    // Find minimum value in the array
    public static int findMinValue(int[] arr) {
        int min = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] < min) {
                min = arr[i];
            }
        }
        return min;
    }

    // Find second maximum value in an array
    public static int findSecondMaxValue(int[] arr) {
        int max = Integer.MIN_VALUE, secondMax = Integer.MIN_VALUE;
        for (int num : arr) {
            if (num > max) {
                secondMax = max;
                max = num;
            } else if (num > secondMax && num != max) {
                secondMax = num;
            }
        }
        return secondMax;
    }

    // Move all zeroes to the end
    public static void moveZeroesToEnd(int[] arr) {
        int nonZeroIndex = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] != 0) {
                arr[nonZeroIndex++] = arr[i];
            }
        }
        while (nonZeroIndex < arr.length) {
            arr[nonZeroIndex++] = 0;
        }
    }

    // Resize array
    public static int[] resizeArray(int[] arr, int newSize) {
        return Arrays.copyOf(arr, newSize);
    }

    // Find missing number (sum of 1 to N, subtract sum of array)
    public static int findMissingNumber(int[] arr, int n) {
        int sum = n * (n + 1) / 2;
        int arrSum = 0;
        for (int num : arr) {
            arrSum += num;
        }
        return sum - arrSum;
    }

    // Check if a string is palindrome
    public static boolean isPalindrome(String str) {
        int start = 0, end = str.length() - 1;
        while (start < end) {
            if (str.charAt(start) != str.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    // Binary search in sorted array
    public static boolean binarySearch(int[] arr, int target) {
        int left = 0, right = arr.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (arr[mid] == target) {
                return true;
            }
            if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return false;
    }

    // Insert in a sorted array
    public static int[] insertInSortedArray(int[] arr, int num) {
        int[] newArr = new int[arr.length + 1];
        int i = 0;
        while (i < arr.length && arr[i] < num) {
            newArr[i] = arr[i];
            i++;
        }
        newArr[i] = num;
        while (i < arr.length) {
            newArr[i + 1] = arr[i];
            i++;
        }
        return newArr;
    }

    // Delete in a sorted array
    public static int[] deleteFromSortedArray(int[] arr, int num) {
        int[] newArr = new int[arr.length - 1];
        int i = 0, j = 0;
        while (i < arr.length) {
            if (arr[i] != num) {
                newArr[j++] = arr[i];
            }
            i++;
        }
        return newArr;
    }
}
